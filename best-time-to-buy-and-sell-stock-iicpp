class Solution {
public:
int solve(int index,vector<int>& prices,int buy,int n,vector<vector<int>>&dp)
{
    if(index==n) 
    {
        if(buy==1) return 0;
        return -1e9;
    }
    if(dp[index][buy] != -1) return dp[index][buy] ;

    if(buy)
    {
      int Buy = -prices[index] + solve(index+1,prices,0,n,dp);
      int notBuy = 0 + solve(index+1,prices,1,n,dp);
      return dp[index][buy] = max(Buy,notBuy); 
    }
    else
    {
     int sell = prices[index] + solve(index+1,prices,1,n,dp);
     int notSell = 0 + solve(index+1,prices,0,n,dp);
     return  dp[index][buy] = max(sell,notSell);
    }
}
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n,vector<int>(2,-1));
        return solve(0,prices,1,n,dp);
    }
};