#define ll long long
#include <vector>
#include <unordered_map>
#include <queue>
#include <climits>
using namespace std;

class Solution {
public:
    vector<ll> solve(int src, unordered_map<int, vector<pair<int, int>>>& graph, int n) {
        priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;  // {distance, node}
        vector<ll> ans(n, LLONG_MAX);
        vector<bool> vis(n, false);

        pq.push({0, src});
        ans[src] = 0;

        while (!pq.empty()) {
            auto [dist, node] = pq.top();
            pq.pop();

            if (vis[node]) continue;
            vis[node] = true;

            for (auto &[adjNode, weight] : graph[node]) {
                ll new_dist = dist + weight;
                if (new_dist < ans[adjNode]) {
                    ans[adjNode] = new_dist;
                    pq.push({new_dist, adjNode});
                }
            }
        }

        return ans;
    }

    vector<bool> findAnswer(int n, vector<vector<int>>& edges) {
        int size = edges.size();
        vector<bool> ans(size, false);
        unordered_map<int, vector<pair<int, int>>> graph;

        for (int i = 0; i < size; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];
            graph[u].push_back({v, w});
            graph[v].push_back({u, w});
        }

        vector<ll> dsrc = solve(0, graph, n);
        vector<ll> ddes = solve(n - 1, graph, n);

        ll shortest_distance = dsrc[n - 1];

        for (int i = 0; i < size; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];

           if (dsrc[u] != LLONG_MAX && ddes[v] != LLONG_MAX &&
        dsrc[u] + w + ddes[v] == shortest_distance) {
        ans[i] = true;
    }
    else if (dsrc[v] != LLONG_MAX && ddes[u] != LLONG_MAX &&
             dsrc[v] + w + ddes[u] == shortest_distance) {
        ans[i] = true;
    }
        }

        return ans;
    }
};
