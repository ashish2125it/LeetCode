class Solution {
public:
    const int MOD = 1e9 + 7;

    void dfs(int node, int parent, int depth, int& maxDepth, int& deepestNode, map<int, vector<int>>& adj, map<int, int>& par) {
        if (depth > maxDepth) {
            maxDepth = depth;
            deepestNode = node;
        }

        for (int child : adj[node]) {
            if (child != parent) {
                par[child] = node;
                dfs(child, node, depth + 1, maxDepth, deepestNode, adj, par);
            }
        }
    }

    int power(int base, int exp) {
        long long result = 1;
        long long b = base;
        while (exp > 0) {
            if (exp % 2 == 1)
                result = (result * b) % MOD;
            b = (b * b) % MOD;
            exp /= 2;
        }
        return result;
    }

    int assignEdgeWeights(vector<vector<int>>& edges) {
        int n = edges.size() + 1;
        map<int, vector<int>> adj;
        for (auto& e : edges) {
            adj[e[0]].push_back(e[1]);
            adj[e[1]].push_back(e[0]);
        }

        int maxDepth = 0;
        int deepestNode = 1;
        map<int, int> parent;
        parent[1] = -1;

       
        dfs(1, -1, 0, maxDepth, deepestNode, adj, parent);

      
        int d = 0;
        int curr = deepestNode;
        while (curr != 1) {
            d++;
            curr = parent[curr];
        }

        
        return power(2, d - 1);


     //   _ _ _  = 2^d/2 = 2^(d-1)
    }
};
