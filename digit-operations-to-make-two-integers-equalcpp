class Solution {
public:
    bool isPrime(int n) {
        if (n <= 1) return false; // 1 and numbers <= 0 are not prime
        if (n <= 3) return true;  // 2 and 3 are prime
        if (n % 2 == 0 || n % 3 == 0) return false; // divisible by 2 or 3
        for (int i = 5; i * i <= n; i += 6) {
            if (n % i == 0 || n % (i + 2) == 0) return false;
        }
        return true;
    }

    int minOperations(int n, int m) {
        // If the initial number n is prime, return -1
        if (isPrime(n)) return -1;

        // Min-heap for Dijkstra's algorithm (cost, current_number)
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        unordered_set<int> visited;

        // Start the transformation process
        pq.push({n, n}); // Initial cost is 0
        visited.insert(n);

        while (!pq.empty()) {
            int cost = pq.top().first;
            int curr = pq.top().second;
            pq.pop();

            // If we've reached the target, return the total cost
            if (curr == m) return cost;

            string currStr = to_string(curr);

            for (int i = 0; i < currStr.size(); i++) {
                int digit = currStr[i] - '0';

                // Increment the digit if it's less than 9
                if (digit < 9) {
                    string nextStr = currStr;
                    nextStr[i] = currStr[i] + 1;
                    int nextNum = stoi(nextStr);
                    if (visited.find(nextNum) == visited.end() && !isPrime(nextNum)) {
                        pq.push({cost + nextNum, nextNum});
                        visited.insert(nextNum);
                    }
                }

                // Decrement the digit if it's greater than 0
                if (digit > 0) {
                    string nextStr = currStr;
                    nextStr[i] = currStr[i] - 1;
                    // Ensure no leading zeros in the transformed number
                    if (nextStr[0] != '0') {
                        int nextNum = stoi(nextStr);
                        if (visited.find(nextNum) == visited.end() && !isPrime(nextNum)) {
                            pq.push({cost + nextNum, nextNum});
                            visited.insert(nextNum);
                        }
                    }
                }
            }
        }

        // If no valid transformation is found, return -1
        return -1;
    }
};