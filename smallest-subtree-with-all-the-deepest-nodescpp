/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    pair<int,TreeNode*> solve(TreeNode* root)
    {
        if(!root) return {0,NULL};

        pair<int,TreeNode*> left_d = solve(root->left);
        pair<int,TreeNode*> right_d = solve(root->right);

       
        if(left_d.first==right_d.first)
        {
            return {1 + left_d.first,root};
        }
        else if(left_d.first > right_d.first)
        return {left_d.first+1,left_d.second};
        else
        return {right_d.first+1,right_d.second};

    }

    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
    if(!root) return root;
   return solve(root).second;
   
    }
};